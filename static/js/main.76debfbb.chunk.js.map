{"version":3,"sources":["components/PersonRow/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","components/API/api.ts","components/utilites.ts","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PersonRow","person","name","sex","born","died","motherName","fatherName","className","PeopleTable","memo","people","map","slug","getPeople","a","fetch","response","json","preparedPeople","peopleFromServer","newPerson","find","p","PeoplePage","useState","setPeople","error","setError","getListOfPeople","useCallback","listOfPeople","useEffect","App","to","path","element","ReactDOM","render","document","getElementById"],"mappings":"sQAMaA,EAAuB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnCC,EAMED,EANFC,KACAC,EAKEF,EALFE,IACAC,EAIEH,EAJFG,KACAC,EAGEJ,EAHFI,KACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,WAGF,OACE,qBAAIC,UAAU,aAAd,UACE,6BAAKN,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,GAAc,QACnB,6BAAKC,GAAc,YChBZE,EAAyBC,gBAAK,gBAAGC,EAAH,EAAGA,OAAH,OACzC,wBAAOH,UAAU,mBAAjB,UACE,wBAAOA,UAAU,qBAAjB,UACE,sCACA,qCACA,sCACA,sCACA,wCACA,2CAEF,gCACGG,EAAOC,KAAI,SAAAX,GAAM,OAChB,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOY,iB,QCjBTC,EAAS,uCAAG,4BAAAC,EAAA,sEACAC,MAHrB,qEAEqB,cACjBC,EADiB,yBAGhBA,EAASC,QAHO,2CAAH,qDCDTC,EAAc,uCAAG,4BAAAJ,EAAA,sEACGD,IADH,cACtBM,EADsB,QAGXR,KAAI,SAACX,GACpB,IAAMoB,EAAS,eAAQpB,GAUvB,OARAoB,EAAUf,WAAac,EACpBE,MAAK,SAACC,GAAD,OAAeA,EAAErB,OAASmB,EAAUf,eACvCe,EAAUf,WAEfe,EAAUd,WAAaa,EACpBE,MAAK,SAACC,GAAD,OAAeA,EAAErB,OAASmB,EAAUd,eACvCc,EAAUd,WAERc,KAdmB,kBAiBrBD,GAjBqB,2CAAH,qDCKdI,EAAiB,WAC5B,MAA4BC,mBAA0B,MAAtD,mBAAOd,EAAP,KAAee,EAAf,KACA,EAA0BD,mBAAwB,MAAlD,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EAAkBC,sBAAW,sBAAC,4BAAAf,EAAA,+EAELI,IAFK,OAE1BY,EAF0B,OAIhCL,EAAUK,GAJsB,gDAMhCH,EAAS,+BANuB,yDAQjC,IAMH,OAJAI,qBAAU,WACRH,MACC,IAECF,EACK,4BAAIA,IAIX,8BACGhB,EACG,cAACF,EAAD,CAAaE,OAAQA,IACrB,8CCGKsB,EA9BH,kBACV,sBAAKzB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wCACA,sBAAKA,UAAU,SAAf,UACE,cAAC,IAAD,CACEA,UAAU,0BACV0B,GAAG,IAFL,uBAMC,IACD,cAAC,IAAD,CACE1B,UAAU,0BACV0B,GAAG,UAFL,+BASJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,6CACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAE9B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,oDC1B/BC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.76debfbb.chunk.js","sourcesContent":["import { FC } from 'react';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonRow: FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n  } = person;\n\n  return (\n    <tr className=\"person-row\">\n      <td>{name}</td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>{motherName || '-/-'}</td>\n      <td>{fatherName || '-/-'}</td>\n    </tr>\n  );\n};\n","import { FC, memo } from 'react';\nimport { PersonRow } from '../PersonRow/PersonRow';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: FC<Props> = memo(({ people }) => (\n  <table className=\"table is-striped\">\n    <thead className=\"people-table__head\">\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Born</th>\n      <th>Died</th>\n      <th>Mother</th>\n      <th>Father</th>\n    </thead>\n    <tbody>\n      {people.map(person => (\n        <PersonRow\n          key={person.slug}\n          person={person}\n        />\n      ))}\n\n    </tbody>\n  </table>\n));\n","const API_BASE\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async (): Promise<Person[]> => {\n  const response = await fetch(API_BASE);\n\n  return response.json();\n};\n","import { getPeople } from './API/api';\n\nexport const preparedPeople = async (): Promise<Person[]> => {\n  const peopleFromServer = await getPeople();\n\n  peopleFromServer.map((person: Person) => {\n    const newPerson = { ...person };\n\n    newPerson.motherName = peopleFromServer\n      .find((p: Person) => p.name === newPerson.motherName)\n      || newPerson.motherName;\n\n    newPerson.fatherName = peopleFromServer\n      .find((p: Person) => p.name === newPerson.fatherName)\n      || newPerson.fatherName;\n\n    return newPerson;\n  });\n\n  return peopleFromServer;\n};\n","import {\n  FC, useCallback, useEffect, useState,\n} from 'react';\n\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { preparedPeople } from '../utilites';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const getListOfPeople = useCallback(async () => {\n    try {\n      const listOfPeople = await preparedPeople();\n\n      setPeople(listOfPeople);\n    } catch {\n      setError('Can\\'t load data from server');\n    }\n  }, []);\n\n  useEffect(() => {\n    getListOfPeople();\n  }, []);\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div>\n      {people\n        ? <PeopleTable people={people} />\n        : <p>Loading...</p>}\n    </div>\n  );\n};\n","import { Link, Route, Routes } from 'react-router-dom';\nimport 'bulma/css/bulma.min.css';\n\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nconst App = () => (\n  <div className=\"App\">\n    <div className=\"header\">\n      <h1>Header</h1>\n      <nav className=\"navbar\">\n        <Link\n          className=\"navbar-item navbar-link\"\n          to=\"/\"\n        >\n          Home page\n        </Link>\n        {' '}\n        <Link\n          className=\"navbar-item navbar-link\"\n          to=\"/people\"\n        >\n          People page\n        </Link>\n      </nav>\n    </div>\n\n    <Routes>\n      <Route path=\"/\" element={<h1>Home page</h1>} />\n      <Route path=\"people\" element={<PeoplePage />} />\n\n      <Route path=\"*\" element={<h1>Home page</h1>} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}